//Подключение шрифта

@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}

@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}

@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth,
  $keepSize: 0,
  $startVar: -1,
  $endVar: -1,
  $middleVar: -1
) {
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  $minSizeValue: rem($minSize);
  $startSizeValue: rem($startSize);

  $minWidth: math.div($minWidth, 16);
  $maxWidth: math.div($maxWidth, 16);
  $containerWidth: math.div($containerWidth, 16);
  $addSize: math.div($startSize - $minSize, 16);
  $widthTo: math.div($widthTo, 16);
  $widthFrom: math.div($widthFrom, 16);

  @if (
      $maxWidthContainer >
        0 or
        $widthFrom !=
        $containerWidth or
        $widthTo !=
        $minWidth
    ) and
    $widthFrom >
    $widthTo
  {
    @if $keepSize == 4 {
      @if $startVar == -1 or $endVar == -1 or $middleVar == -1 {
        @media (min-width: $widthFromMedia) {
          #{$property}: $startSizeValue;
        }

        @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
          #{$property}: calc(
            #{$minSizeValue} + #{$addSize} * (100vw - #{$widthTo + rem}) / #{$widthFrom -
              $widthTo}
          );
        }
        @media (max-width: $widthToMedia) {
          #{$property}: $minSizeValue;
        }
      } @else {
        @media (min-width: $widthFromMedia) {
          #{$property}: var(#{$startVar}, #{$startSizeValue});
        }

        @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
          #{$property}: calc(
            var(#{$endVar}, #{$minSizeValue}) + var(#{$middleVar}, #{$addSize}) *
              (100vw - #{$widthTo + rem}) / #{$widthFrom - $widthTo}
          );
        }
        @media (max-width: $widthToMedia) {
          #{$property}: var(#{$endVar}, #{$minSizeValue});
        }
      }
    } @else {
      @if $widthFrom == $containerWidth or $keepSize == 1 or $keepSize == 2 {
        @media (min-width: $widthFromMedia) {
          #{$property}: $startSizeValue;
        }
      }

      @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
        #{$property}: calc(
          #{$minSizeValue} + #{$addSize} * (100vw - #{$widthTo + rem}) / #{$widthFrom -
            $widthTo}
        );
      }

      @if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
        @media (max-width: $widthToMedia) {
          #{$property}: $minSizeValue;
        }
      }
    }
  } @else {
    #{$property}: calc(
      #{$minSizeValue} +
        #{$addSize} *
        (100vw - #{$widthTo + rem}) /
        #{$maxWidth -
        $widthTo}
    );
  }
}

@mixin currency($sym) {
  &::after {
    content: "#{$sym}";
  }
}

@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}
